{
  "AWSTemplateFormatVersion": "2010-09-09",

  "Parameters": {
    "HostedZonedId": {
      "Description": "Route 53 hosted zone id",
      "Type": "AWS::Route53::HostedZone::Id"
    },
    "VpcId": {
      "ConstraintDescription": "must be the VPC Id of an existing Virtual Private Cloud.",
      "Description": "VpcId of your existing Virtual Private Cloud (VPC)",
      "Type": "AWS::EC2::VPC::Id"
    },
    "SubnetID": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "List of an existing subnet IDs to use for the service instance auto scaling group"
    },
    "JobClusterSize": {
      "Description": "Number of instances in the job cluster",
      "Type": "Number",
      "Default": "2"
    },
    "JobInstanceType" : {
      "Description": "The EC2 job instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t2.micro", "t2.small", "t2.medium", "m3.medium", "m3.large", "m3.xlarge",
        "m4.xlarge", "m4.2xlarge", "m4.4xlarge",
        "m3.2xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge",
        "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge",
        "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge",
        "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "ServiceInstanceType" : {
      "Description": "The EC2 job instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t2.micro", "t2.small", "t2.medium", "m3.medium", "m3.large", "m3.xlarge",
        "m3.2xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge",
        "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge",
        "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge",
        "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "DBName": {
      "Description": "DB Name",
      "Type": "String",
      "Default": "sundial"
    },
    "DBUsername": {
      "Description": "DB Admin Username",
      "Type": "String",
      "Default": "sundial"
    },
    "DBPassword": {
      "Description": "DB Admin Password",
      "Type": "String"
    },
    "DBInstanceEndpoint": {
      "Description": "DB instance endpoint",
      "Type": "String"
    },
    "SSHKey": {
      "Description": "SSH key pair to associate with instances",
      "Type": "AWS::EC2::KeyPair::KeyName"
    },
    "JobInstanceDiskSpace": {
      "Description": "Amount of disk space to give jobs instances in GB",
      "Type": "Number",
      "Default": "8",
      "MinValue": "1",
      "MaxValue": "1024"
    },
    "JobInstanceDiskType": {
      "Description": "Type of disk to allocate to job instance. SSD(gp2), high-throughput(io1) or Magnetic(standard)",
      "Type": "String",
      "Default": "gp2",
      "AllowedValues": ["gp2", "io1", "standard"]
    } ,
    "SSHAllowedCIDR": {
      "Description": "IP address range from which SSHing into intances is allowed defined in CIDR format",
      "Type": "String",
      "Default": "0.0.0.0/0",
      "AllowedPattern": "(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/([0-9]|[1-2][0-9]|3[0-2]))",
      "ConstraintDescription": "Value must be valid CIDR notation"
    }
    
  },

  "Mappings" : {
    "AWSRegionToECSAMI" : {
      "us-east-1"      : { "AMIID" : "ami-33b48a59" },
      "us-west-2"      : { "AMIID" : "ami-26f78746" },
      "eu-west-1"      : { "AMIID" : "ami-77ab1504" },
      "ap-northeast-1" : { "AMIID" : "ami-b3afa2dd" },
      "ap-southeast-2" : { "AMIID" : "ami-cf6342ac" }
    },
    "AWSRegionToLinuxAMI": {
      "us-east-1"      : { "AMIID" : "ami-08111162" },
      "us-west-2"      : { "AMIID" : "ami-c229c0a2" },
      "eu-west-1"      : { "AMIID" : "ami-31328842" },
      "ap-northeast-1" : { "AMIID" : "ami-f80e0596" },
      "ap-southeast-2" : { "AMIID" : "ami-f2210191" }
    }
  },

  "Resources": {

    "ECSCluster": {
      "Type": "AWS::ECS::Cluster"
    },

    "JobInstanceConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",

      "Metadata": {
        "AWS::CloudFormation::Init": {

          "AddToCluster": {
            "commands": {
              "01_add_instance_to_cluster" : {
                "command" : { "Fn::Join": [ "", [ "#!/bin/bash\n", "echo ECS_CLUSTER=", { "Ref": "ECSCluster" }, " >> /etc/ecs/ecs.config" ] ] }
              }
            }
          },

          "CfnHup": {
            "files" : {
              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.JobInstanceConfiguration.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                  "         --stack ", { "Ref" : "AWS::StackName" },
                  "         --resource JobInstanceConfiguration",
                  "         --region ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]}
              }
            },

            "services" : {
              "sysvinit" : {
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true", "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"] }
              }
            }
          },

          "UpdateMTU": {
            "files": {
              "/etc/dhcp/dhclient-eth0.conf": {
                "content": "interface \"eth0\" {\nsupersede interface-mtu 1500;\n}\n",
                "mode": "000644",
                "owner": "root",
                "group": "root"
              }
            },
            "commands": {
              "01_update_mtu": {
                "command": "ip link set dev eth0 mtu 1500"
              },
              "02_update_docker": {
                "command": "sed 's/OPTIONS=\"/OPTIONS=\"--mtu=1500 /' /etc/sysconfig/docker>docker.new\ncp docker.new /etc/sysconfig/docker"
              },
              "03_restart_docker": {
                "command": "service docker restart"
              },
              "04_restart_ecs_agent": {
                "command": "start ecs"
              }
            }
          },

          "configSets": {
            "default": ["AddToCluster", "CfnHup", "UpdateMTU"]
          }

        }
      },

      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionToECSAMI", { "Ref" : "AWS::Region" }, "AMIID" ] },
        "BlockDeviceMappings" : [
          {
            "DeviceName" : "/dev/xvda",
            "Ebs" : {
              "VolumeSize" : { "Ref": "JobInstanceDiskSpace" },
              "VolumeType": { "Ref": "JobInstanceDiskType" }
            }
          }
        ],
        "SecurityGroups": [ {"Ref": "JobInstanceSecurityGroup"} ],
        "InstanceType"   : { "Ref" : "JobInstanceType" },
        "IamInstanceProfile": { "Ref": "JobInstanceEC2InstanceProfile" },
        "KeyName": { "Ref": "SSHKey"},
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "Content-Type: multipart/mixed; boundary=\"=======6t461261365==\"\n",
          "MIME-Version: 1.0\n",
          "\n",
          "--=======6t461261365==\n",
          "Content-Type: text/cloud-config\n",
          "\n",
          "users:\n",
          "- default\n",
          "- name: sundial\n",
          "  gecos: Sundial User\n",
          "  sudo: ALL=(ALL) NOPASSWD:ALL\n",
          "\n",
          "--=======6t461261365==\n",
          "Content-Type: text/x-shellscript; charset=\"us-ascii\"\n",
          "Content-Disposition: attachment; filename=\"cfn-setup.sh\"\n",
          "\n",
          "#!/bin/bash -xe\n",
          "yum install -y aws-cfn-bootstrap ruby\n",

          "/opt/aws/bin/cfn-init -v ",
          "         --stack ", { "Ref" : "AWS::StackName" },
          "         --resource JobInstanceConfiguration",
          "         --region ", { "Ref" : "AWS::Region" }, "\n",

          "/opt/aws/bin/cfn-signal -e $? ",
          "         --stack ", { "Ref" : "AWS::StackName" },
          "         --resource JobInstanceAutoScalingGroup",
          "         --region ", { "Ref" : "AWS::Region" }, "\n",
          "\n",
          "--=======6t461261365==--\n"
        ]]}}
      }
    },

    "JobInstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription" : "allow SSH from anywhere",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": { "Ref": "SSHAllowedCIDR" }
          }
        ],
        "VpcId": { "Ref": "VpcId" }
      }
    },

    "JobInstanceAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": { "Ref": "SubnetID" },
        "LaunchConfigurationName": { "Ref": "JobInstanceConfiguration" },
        "MinSize": 2,
        "MaxSize": 6,
        "DesiredCapacity": { "Ref": "JobClusterSize" }
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "0",
          "MaxBatchSize": "1",
          "PauseTime" : "PT15M",
          "WaitOnResourceSignals": "false"
        }
      }
    },

    "JobInstanceEC2Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "job-ecs",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecs:CreateCluster",
                    "ecs:RegisterContainerInstance",
                    "ecs:DeregisterContainerInstance",
                    "ecs:DiscoverPollEndpoint",
                    "ecs:Submit*",
                    "ecs:Poll",
                    "ec2:AuthorizeSecurityGroupIngress",
                    "ec2:Describe*",
                    "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                    "elasticloadbalancing:Describe*",
                    "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                  ],
                  "Resource": "*"
                }
              ]
            }
          },
          {
            "PolicyName": "job-sundial",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:*"
                  ],
                  "Resource": [
                    "arn:aws:logs:*:*:*"
                  ]
                },
                {
                  "Sid": "Stmt1431384914000",
                  "Effect": "Allow",
                  "Action": [
                    "s3:*"
                  ],
                  "Resource": [
                    {
                      "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "S3Bucket" }, "/*"]]
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sdb:*"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Sid": "Stmt1434081804000",
                  "Effect": "Allow",
                  "Action": [
                    "sdb:*"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:BatchGetImage",
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:GetAuthorizationToken"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect":"Allow",
                  "Action":[
                    "cloudformation:DescribeStacks",
                    "cloudformation:DescribeStackEvents",
                    "cloudformation:DescribeStackResource",
                    "cloudformation:DescribeStackResources"
                  ],
                  "Resource":"*"
                }

              ]
            }
          }
        ]
      }
    },

    "JobInstanceEC2InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "JobInstanceEC2Role"
          }
        ]
      }
    },

    "ServiceInstanceConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",

      "Metadata": {
        "AWS::CloudFormation::Init": {

          "Setup": {
            "packages": {
              "yum": {
                "docker": []
              }
            },

            "services": {
              "sysvinit": {
                "docker": {
                  "enabled": "true",
                  "ensureRunning": "true"
                }
              }
            }

          },

          "CodeDeploy": {
            "commands": {
              "01_fetch_install_script": {
                "command": "aws s3 cp s3://aws-codedeploy-us-east-1/latest/install /tmp/codedeploy_install --region us-east-1"
              },
              "02_install_codedeploy": {
                "command": "chmod +x /tmp/codedeploy_install && /tmp/codedeploy_install auto"
              }
            },
            "services": {
              "sysvinit": {
                "codedeploy-agent": {
                  "enabled": "true",
                  "ensureRunning": "true"
                }
              }
            }
          },

          "AWSLogs": {
            "packages": {
              "yum": {
                "awslogs": []
              }
            },

            "files": {
              "/etc/awslogs/awslogs.conf": {
                "content": { "Fn::Join" : ["\n", [
                  "#",
                  "# ------------------------------------------",
                  "# CLOUDWATCH LOGS AGENT CONFIGURATION FILE",
                  "# ------------------------------------------",
                  "#",
                  "# You can find logs for the agent in /var/log/awslogs.log",
                  "#",
                  "# ------------------------------------------",
                  "# CONFIGURATION DETAILS",
                  "# ------------------------------------------",
                  "#",
                  "# http://docs.aws.amazon.com/AmazonCloudWatch/latest/DeveloperGuide/AgentReference.html",
                  "#",
                  "",
                  "[general]",
                  "# Path to the CloudWatch Logs agent's state file. The agent uses this file to maintain",
                  "# client side state across its executions.",
                  "state_file = /var/lib/awslogs/agent-state",
                  "",
                  "# A batch is buffered for buffer-duration amount of time or 32KB of log events.",
                  "# Defaults to 5000 ms and its minimum value is 5000 ms.",
                  "buffer_duration = 5000",
                  "",
                  "# Use 'end_of_file' to start reading from the end of the file.",
                  "# Use 'start_of_file' to start reading from the beginning of the file.",
                  "initial_position = start_of_file",
                  "",
                  "# Encoding of file",
                  "encoding = utf-8 # Other supported encodings include: ascii, latin-1",
                  "",
                  "# Supported DateTime formats:",
                  "#   https://docs.python.org/2/library/datetime.html#strftime-strptime-behavior",
                  "",
                  "",
                  "[messages]",
                  "datetime_format = %b %d %H:%M:%S",
                  "file = /var/log/messages",
                  "log_stream_name = {instance_id}",
                  "log_group_name = sundial-messages",
                  "",
                  "",
                  "#2015-01-07 17:05:10,713 - [INFO]",
                  "[application]",
                  "datetime_format = %Y-%m-%d %H:%M:%S",
                  "file = /var/log/sundial/application.log",
                  "log_stream_name = {instance_id}",
                  "log_group_name = sundial-application",
                  ""
                ]]}
              }
            },

            "services": {
              "sysvinit": {
                "awslogs": {
                  "enabled": "true",
                  "ensureRunning": "true"
                }
              }
            }
          },

          "AWSCliUpgrade": {
            "commands": {
              "01_upgrade_aws_cli": {
                "command": "pip install --upgrade awscli"
              }
            }
          },

          "CfnHup": {
            "files" : {
              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.ServiceInstanceConfiguration.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                  "         --stack ", { "Ref" : "AWS::StackName" },
                  "         --resource ServiceInstanceConfiguration",
                  "         --region ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]}
              }
            },

            "services" : {
              "sysvinit" : {
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true", "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"] }
              }
            }
          },

          "configSets": {
            "default": ["Setup", "CfnHup", "AWSCliUpgrade", "CodeDeploy", "AWSLogs"]
          }

        }
      },

      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionToLinuxAMI", { "Ref" : "AWS::Region" }, "AMIID" ] },
        "SecurityGroups": [ {"Ref": "ServiceInstanceSecurityGroup"} ],
        "InstanceType"   : { "Ref" : "ServiceInstanceType" },
        "IamInstanceProfile": { "Ref": "ServiceInstanceEC2InstanceProfile" },
        "KeyName" : { "Ref": "SSHKey"},
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
          "Content-Type: multipart/mixed; boundary=\"=======6t461261365==\"\n",
          "MIME-Version: 1.0\n",
          "\n",
          "--=======6t461261365==\n",
          "Content-Type: text/cloud-config\n",
          "\n",
          "users:\n",
          "- default\n",
          "- name: sundial\n",
          "  gecos: Sundial User\n",
          "  sudo: ALL=(ALL) NOPASSWD:ALL\n",
          "\n",
          "--=======6t461261365==\n",
          "Content-Type: text/x-shellscript; charset=\"us-ascii\"\n",
          "Content-Disposition: attachment; filename=\"cfn-setup.sh\"\n",
          "\n",
          "#!/bin/bash -xe\n",
          "yum update -y aws-cfn-bootstrap\n",

          "/opt/aws/bin/cfn-init -v ",
          "         --stack ", { "Ref" : "AWS::StackName" },
          "         --resource ServiceInstanceConfiguration",
          "         --region ", { "Ref" : "AWS::Region" }, "\n",

          "/opt/aws/bin/cfn-signal -e $? ",
          "         --stack ", { "Ref" : "AWS::StackName" },
          "         --resource ServiceInstanceAutoScalingGroup",
          "         --region ", { "Ref" : "AWS::Region" }, "\n",
          "\n",
          "--=======6t461261365==--\n"
        ]]}}
      }
    },

    "ServiceInstanceSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription" : "for service instances",
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "22",
            "ToPort": "22",
            "CidrIp": { "Ref": "SSHAllowedCIDR" }
          }
        ],
        "VpcId": { "Ref": "VpcId" }
      }
    },

    "ServiceInstanceAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "VPCZoneIdentifier": { "Ref": "SubnetID" },
        "LaunchConfigurationName": { "Ref": "ServiceInstanceConfiguration" },
        "MinSize": 1,
        "MaxSize": 1,
        "DesiredCapacity": 1
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "0",
          "MaxBatchSize": "1",
          "PauseTime" : "PT15M",
          "WaitOnResourceSignals": "false"
        }
      }
    },

    "ServiceInstanceEC2Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "sundial-policy",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecs:*"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:*"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ec2:*"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "autoscaling:DescribeAutoScalingInstances",
                    "autoscaling:DescribeTags"
                  ],
                  "Resource": "*"
                },
                {
                  "Effect":"Allow",
                  "Action":[
                    "cloudformation:DescribeStacks",
                    "cloudformation:DescribeStackEvents",
                    "cloudformation:DescribeStackResource",
                    "cloudformation:DescribeStackResources"
                  ],
                  "Resource":"*"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:*"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ses:*"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "sdb:*"
                  ],
                  "Resource": [
                    "*"
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:BatchGetImage",
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:GetAuthorizationToken"
                  ],
                  "Resource": [
                    "*"
                  ]
                }
              ]
            }
          }
        ]
      }
    },

    "ServiceInstanceEC2InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "ServiceInstanceEC2Role"
          }
        ]
      }
    },

    "CodeDeployServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Sid": "",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "codedeploy.us-east-1.amazonaws.com",
                  "codedeploy.us-west-2.amazonaws.com",
                  "codedeploy.eu-west-1.amazonaws.com",
                  "codedeploy.ap-southeast-2.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "codedeploy-service-role-policy",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "autoscaling:CompleteLifecycleAction",
                    "autoscaling:DeleteLifecycleHook",
                    "autoscaling:DescribeAutoScalingGroups",
                    "autoscaling:DescribeLifecycleHooks",
                    "autoscaling:PutLifecycleHook",
                    "autoscaling:RecordLifecycleActionHeartbeat",
                    "ec2:DescribeInstances",
                    "ec2:DescribeInstanceStatus",
                    "tag:GetTags",
                    "tag:GetResources",
                    "ecr:GetDownloadUrlForLayer",
                    "ecr:BatchGetImage",
                    "ecr:BatchCheckLayerAvailability",
                    "ecr:GetAuthorizationToken"
                  ],
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },

    "CodedeployApplication": {
      "Type" : "AWS::CodeDeploy::Application",
      "Properties" : {
        "ApplicationName" : "Sundial"
      }
    },

    "CodedeployDeploymentGroup": {
      "Type" : "AWS::CodeDeploy::DeploymentGroup",
      "Properties" : {
        "ApplicationName" : "Sundial",
        "AutoScalingGroups" : [
          { "Ref": "ServiceInstanceAutoScalingGroup" }
        ],
        "DeploymentGroupName" : "SundialProd",
        "ServiceRoleArn" : {
          "Fn::GetAtt" : [ "CodeDeployServiceRole" , "Arn" ]
        }
      }
    },

    "S3Bucket": {
      "Type" : "AWS::S3::Bucket",
      "Properties" : {
        "LifecycleConfiguration" : {
          "Rules" : [
            {
              "ExpirationInDays" : 30,
              "Status" : "Enabled",
              "Prefix" : "logs/"
            },
            {
              "ExpirationInDays" : 30,
              "Status" : "Enabled",
              "Prefix" : "email-images/"
            },
            {
              "ExpirationInDays" : 30,
              "Status" : "Enabled",
              "Prefix" : "agent-config/"

            }
          ]
        }

      }
    },

    "SimpleDBDomain": {
      "Type" : "AWS::SDB::Domain",
      "Properties" : {
        "Description" : "Store metadata information"
      }
    }

  },

  "Outputs": {
    "DBInstanceEndpoint": {
      "Value": {"Ref": "DBInstanceEndpoint"}
    }
  }
}
